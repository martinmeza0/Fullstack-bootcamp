Fetch - metodo, nos permite recuperar datos de internet a partir de una direccion web, una peticion asincrona  a una url.
        Devuelve una promesa.
        .then() - retorna la promesa 

useEffect(() => {

}, []);  -  con [] le indicamos que no tiene dependencias por lo tanto se ejecutará una sola vez,
            Si dentro de los [] le pasamos una dependencia [notes], se ejecutara cada vez que notes tenga un cambio en el estado

useEffect(() => {
fetch('https://jsonplaceholder.typicode.com/posts')
    .then((response) => response.json())
    .then((json) => {
    setNotes(json)
})
}, [newNote]);


date: new Date().toISOString() - devuelve la fecha actual y lo pasa a string

setNotes(notes.concat(AddNote)); concat - añade lo que escribimos al array notes


return (

    .filter((note) => {       //filtra las notas de acuerdo a la condicion en {}
        if (showAll) return true;
        return note.important === true;
    })

    <NoteComponent key={note} {...note} />  -  mala practica, no controlas lo que le llega a tu componente


)

// useEffect - hook, se ejecuta cada vez que se renderiza un componente
// map()  - transforma el valor, devuelve c/u de los elementos transformados
//key - ayuda a react para que cada vez que se renderize saber donde se tiene que conservar ese componente
//se considera mala practica el math.random() y el index dentro de una key, la mejor opcion. usar el id que trae el array x cada elemento